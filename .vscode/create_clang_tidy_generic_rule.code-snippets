{
	"Create Clang-Tidy Generic Skeleton": {
	  "prefix": "clang_tidy_generic",
	  "description": "Create a clang-tidy generic skeleton",
	  "isFileTemplate": true,
	  "scope": "cpp",
	  "body": [
		"#include \"pch.hpp\"",
		"",
		"using namespace clang;",
		"using namespace clang::tidy;",
		"using namespace clang::ast_matchers;",
		"using namespace clang::transformer;",
		"using namespace clang::tidy::utils;",
		"",
		"namespace {",
		"",
		"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} : public ClangTidyCheck {",
		"public:",
		"  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(StringRef Name, ClangTidyContext *Context)",
		"      : ClangTidyCheck(Name, Context) {}",
        "",
        "  void registerMatchers(MatchFinder *Finder) override {",
		"    // clang-format off",
        "    Finder->addMatcher(varDecl(isExpansionInMainFile()).bind(\"var\"), this);",
		"    // clang-format on",
        "  }",
        "",
        "  void check(const MatchFinder::MatchResult &Result) override {",
        "    if (const auto *VD = Result.Nodes.getNodeAs<VarDecl>(\"var\")) {",
        "      diag(VD->getLocation(), \"Found variable declaration: %0\")",
        "        << VD->getNameAsString();",
        "    }",
        "  }",
		"};",
		"",
		"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Module : public ClangTidyModule {",
		"public:",
		"  void addCheckFactories(ClangTidyCheckFactories &Factories) override {",
		"    Factories.registerCheck<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}>(\"${TM_FILENAME_BASE/[_]/-/g}\");",
		"  }",
		"};",
		"",
		"} // end anonymous namespace",
		"",
		"// Register the module using this statically initialized variable",
		"static ClangTidyModuleRegistry::Add<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Module>",
		"    X(\"${TM_FILENAME_BASE/[_]/-/g}\", \"Adds the new replacer check.\");"
	  ]
	}
  }