{
	// Place your soldat_clang_tidy workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"ClangTidy PCH": {
		"scope": "cpp",
		"prefix": "create_pch",
		"isFileTemplate": true,
		"description": "Create PCH for new checker",
		"body": [
			"#pragma once",
			"#include \"clang-tidy/ClangTidy.h\"",
			"#include \"clang-tidy/ClangTidyCheck.h\"",
			"#include \"clang-tidy/ClangTidyModule.h\"",
			"#include \"clang-tidy/ClangTidyModuleRegistry.h\"",
			"#include \"clang-tidy/utils/TransformerClangTidyCheck.h\"",
			"#include \"clang/ASTMatchers/ASTMatchers.h\"",
			"#include \"clang/ASTMatchers/ASTMatchFinder.h\"",
			"#include \"clang/Tooling/Transformer/RewriteRule.h\"",
			"#include \"clang/Tooling/Transformer/Stencil.h\"",
			"#include \"clang/Tooling/Transformer/Transformer.h\"",
		]
	}
}