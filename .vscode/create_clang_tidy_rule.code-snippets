{
	"Create Clang-Tidy Transformer Skeleton": {
	  "prefix": "clangTidyRule",
	  "description": "Create a clang-tidy transformer skeleton",
	  "isFileTemplate": true,
	  "scope": "cpp",
	  "body": [
		"#include \"clang-tidy/ClangTidy.h\"",
		"#include \"clang-tidy/ClangTidyCheck.h\"",
		"#include \"clang-tidy/ClangTidyModule.h\"",
		"#include \"clang-tidy/ClangTidyModuleRegistry.h\"",
		"#include \"clang/ASTMatchers/ASTMatchFinder.h\"",
		"",
		"using namespace clang;",
		"using namespace clang::tidy;",
		"using namespace clang::ast_matchers;",
		"",
		"namespace {",
		"",
		"class ${1:clang tidy rule name}Callback : public MatchFinder::MatchCallback {",
		"public:",
		"  explicit ${1}Callback(ClangTidyCheck &Check) : Check(Check) {}",
		"",
		"  void run(const MatchFinder::MatchResult &Result) override {",
		"    // Handle matches and fix code here",
		"  }",
		"",
		"private:",
		"  [[maybe_unused]] ClangTidyCheck &Check;",
		"};",
		"",
		"class ${1} : public ClangTidyCheck {",
		"public:",
		"  ${1}(StringRef Name, ClangTidyContext *Context)",
		"      : ClangTidyCheck(Name, Context), Callback(*this) {}",
		"",
		"  void registerMatchers(MatchFinder *Finder) override {",
		"    // Register matchers here",
		"    // Example: Finder->addMatcher(functionDecl().bind(\"function\"), &Callback);",
		"  }",
		"",
		"private:",
		"  ${1}Callback Callback;",
		"};",
		"",
		"class ${1}Module : public ClangTidyModule {",
		"public:",
		"  void addCheckFactories(ClangTidyCheckFactories &Factories) override {",
		"    Factories.registerCheck<${1}>(\"${2:clang-tidy-rule-name}\");",
		"  }",
		"};",
		"",
		"} // end anonymous namespace",
		"",
		"// Register the module using this statically initialized variable",
		"static ClangTidyModuleRegistry::Add<${1}Module>",
		"    X(\"${2}\", \"${3:Description of clang-tidy rule?}\");"
	  ]
	}
  }