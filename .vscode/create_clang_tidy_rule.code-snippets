{
	"Create Clang-Tidy Transformer Skeleton": {
	  "prefix": "clang_tidy_transformer",
	  "description": "Create a clang-tidy transformer skeleton",
	  "isFileTemplate": true,
	  "scope": "cpp",
	  "body": [
		"#include \"clang-tidy/ClangTidy.h\"",
		"#include \"clang-tidy/ClangTidyCheck.h\"",
		"#include \"clang-tidy/ClangTidyModule.h\"",
		"#include \"clang-tidy/ClangTidyModuleRegistry.h\"",
		"#include \"clang-tidy/utils/TransformerClangTidyCheck.h\"",
		"#include \"clang/ASTMatchers/ASTMatchers.h\"",
		"#include \"clang/ASTMatchers/ASTMatchFinder.h\"",
		"#include \"clang/Tooling/Transformer/RewriteRule.h\"",
		"#include \"clang/Tooling/Transformer/Stencil.h\"",
		"#include \"clang/Tooling/Transformer/Transformer.h\"",
		"",
		"using namespace clang;",
		"using namespace clang::tidy;",
		"using namespace clang::ast_matchers;",
		"using namespace clang::transformer;",
		"using namespace clang::tidy::utils;",
		"",
		"namespace {",
		"",
		"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} : public TransformerClangTidyCheck {",
		"    static auto rule() {",
		"        // clang-format off",
		"        auto matcher = traverse(TraversalKind::TK_IgnoreUnlessSpelledInSource,",
		"            cxxMemberCallExpr()",
		"        ).bind(\"bind_whole_expr\");",
		"        // clang-format on",
		"",
		"        return makeRule(matcher,",
		"            {change(node(\"bind_whole_expr\"), cat(\"SampleReplacement\"))},",
		"            cat(\"Describe what has changed\")",
		"        );",
		"    }",
		"",
		"public:",
		"  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(StringRef Name, ClangTidyContext *Context)",
		"      : TransformerClangTidyCheck(rule(), Name, Context) {}",
		"};",
		"",
		"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Module : public ClangTidyModule {",
		"public:",
		"  void addCheckFactories(ClangTidyCheckFactories &Factories) override {",
		"    Factories.registerCheck<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}>(\"${TM_FILENAME_BASE/[_]/-/g}\");",
		"  }",
		"};",
		"",
		"} // end anonymous namespace",
		"",
		"// Register the module using this statically initialized variable",
		"static ClangTidyModuleRegistry::Add<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Module>",
		"    X(\"${TM_FILENAME_BASE/[_]/-/g}\", \"Adds the new replacer check.\");"
	  ]
	}
  }